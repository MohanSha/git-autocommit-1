#!/usr/bin/env python3
import subprocess
import pyinotify
from datetime import datetime
import asyncio
import os
import sys
import argparse

class AutoCommit(pyinotify.ProcessEvent):
    EVENT_MASK = pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY | pyinotify.IN_MOVED_FROM | pyinotify.IN_MOVED_TO

    def __init__(self, branch='autocommit'):
        self.branch = branch
        self.committing = False
        self.loop = asyncio.get_event_loop()
        self.cwd = os.path.realpath(os.curdir)

    def shorten_pathname(self, pathname):
        if pathname.startswith(self.cwd):
            pathname = pathname[len(self.cwd):]
            if pathname.startswith('/'):
                pathname = pathname[1:]
        return pathname

    def process_IN_CREATE(self, event):
        self.process(event)

    def process_IN_DELETE(self, event):
        self.process(event)

    def process_IN_MODIFY(self, event):
        self.process(event)

    def process_IN_MOVED_FROM(self, event):
        self.process(event)

    def process_IN_MOVED_TO(self, event):
        self.process(event)

    def process(self, event):
        pathname = self.shorten_pathname(event.pathname)
        if pathname.startswith('.git/'):
            return
        self.commit_later()

    def commit_later(self):
        if not self.committing:
            self.committing = True
            self.loop.call_later(1, self.commit)

    def commit(self):
        message = "Automatic commit at {:%Y-%m-%d %H:%M:%S}".format(datetime.now())
        subprocess.check_call(['git', 'checkout', '-B', self.branch])
        subprocess.check_call(['git', 'add', '-A', '.'])
        if subprocess.check_output(['git', 'status', '--porcelain']):
            subprocess.check_call(['git', 'status', '--short'])
            subprocess.check_call(['git', 'commit', '-m', message])
            print('')
        self.committing = False

    def exclude_filter(self, path):
        """Exclude repository metadata from inotify watches."""
        assert(path.startswith(self.cwd))
        relative = path[len(self.cwd):]
        return relative == '/.git' or relative.startswith('/.git/')

    def run(self):
        if not os.path.exists('.git'):
            raise Exception("Should be called in root of repository.")

        self.commit()

        wm = pyinotify.WatchManager()
        notifier = pyinotify.AsyncioNotifier(wm, self.loop, default_proc_fun=self)
        wm.add_watch(self.cwd, self.EVENT_MASK, rec=True, auto_add=True, exclude_filter=self.exclude_filter)

        try:
            self.loop.run_forever()
        except KeyboardInterrupt:
            pass


def watch(args):
    AutoCommit(args.branch).run()


def summarize(args):
    subprocess.check_call(['git', 'checkout', '-B', args.branch])
    subprocess.check_call(['git', 'merge', '-B', self.branch])



def set_default_subparser(parser, name, args=None):
    """default subparser selection. Call after setup, just before parse_args()
    name: is the name of the subparser to call by default
    args: if set is the argument list handed to parse_args()

    , tested with 2.7, 3.2, 3.3, 3.4
    it works with 2.6 assuming argparse is installed
    """
    subparser_found = False
    for arg in sys.argv[1:]:
        if arg in ['-h', '--help']:  # global help if no subparser
            break
    else:
        for x in parser._subparsers._actions:
            if not isinstance(x, argparse._SubParsersAction):
                continue
            for sp_name in x._name_parser_map.keys():
                if sp_name in sys.argv[1:]:
                    subparser_found = True
        if not subparser_found:
            # insert default in first position, this implies no
            # global options without a sub_parsers specified
            if args is None:
                sys.argv.insert(1, name)
            else:
                args.insert(0, name)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-w", "--watch-branch", type=str, default='autocommit',
                        help="automatically commit to this branch [default: autocommit]")
    subparsers = parser.add_subparsers(help="subcommands")

    watch_parser = subparsers.add_parser('watch', help='watch repository for changes and commit them [default]')
    watch_parser.set_defaults(func=watch)

    summarize_parser = subparsers.add_parser('summarize', help='merge automatic commits into normal branch')
    summarize_parser.add_argument("-b", "--branch", type=str, default='master',
                                  help="commit summary to this branch [default: master]")
    summarize_parser.add_argument("-m", "--message", type=str, default='',
                              help="summary message []")
    summarize_parser.set_defaults(func=summarize)

    set_default_subparser(parser, 'watch')
    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
